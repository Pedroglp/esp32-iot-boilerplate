!function(){"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),function(){var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var i=n.getElementsByTagName("script");if(i.length)for(var s=i.length-1;s>-1&&(!e||!/^http(s?):/.test(e));)e=i[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e}();class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n\n            button {\n                padding: 0.9em;\n                border: 1px solid #e9e9e9;\n                background-color: white;\n                border-radius: 24px;\n                min-width: 108px;\n                font-weight: 400;\n                cursor: pointer;\n                transition: all 0.3s ease-in-out;\n            }\n\n            button:hover {\n                filter: brightness(95%);\n            }\n\n        </style>\n        <button><slot></slot></button>\n      ",this.button=this.shadowRoot.querySelector("button")}set onClick(t){this.button.onclick=t}}class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n\n            .card {\n                min-width: 242px;\n                width: 100%;\n                max-width: 480px;\n                min-height: 296px;\n                max-height: 296px;\n                align-self: center;\n                margin-left: auto;\n                margin-right: auto;\n                overflow: hidden;\n                background-color: white;\n                border-radius: 8px;\n                border: 1px solid #e9e9e9;\n                display: flex;\n                flex-direction: column;\n            }\n\n            .card-title {\n                position: sticky;\n                width: 100%;\n                display: flex;\n                flex-shrink: 0;\n                align-items: center;\n                justify-content: center;\n                top: 0;\n                height: 64px;\n                padding: 4px;\n                font-weight: 600;\n                font-size: 1.2em;\n                background-color: white;\n                border-bottom: 1px solid #e9e9e9;\n            }\n\n            .card-body {\n                overflow: scroll;\n                width: 100%;\n                flex-grow: 1;\n                max-height: 232px;\n            }\n\n\n            .fadeOut {\n                animation: fadeOut 0.75s forwards;\n            }\n\n            .fadeIn {\n                animation: fadeIn 0.75s forwards;\n            }\n\n\n            @keyframes fadeIn {\n                from {\n                    opacity: 0;\n                }\n                to {\n                    opacity: 1;\n                }\n            }\n\n            @keyframes fadeOut {\n                from {\n                    opacity: 1;\n                }\n                to {\n                    opacity: 0;\n                }\n            }\n\n        </style>\n        \n        <div class="card">\n            <slot name="title" class="card-title"></slot>\n            <slot name="body" class="card-body"></slot>\n        </div>\n      ',this.content=this.shadowRoot.querySelector(".card"),this.onCloseHandler=()=>{},this.onShowHandler=()=>{}}set onClose(t){this.onCloseHandler=t}set onShow(t){this.onShowHandler=t}show=()=>{this.content.classList.remove("fadeOut"),this.content.classList.add("fadeIn"),this.content.style="display: flex; opacity: 1;",this.hidden=!1,this.content.addEventListener("animationend",(()=>{this.onShowHandler()}),{once:!0})};close=()=>{this.content.classList.remove("fadeIn"),this.content.classList.add("fadeOut"),this.content.style="opacity: 0;",this.content.addEventListener("animationend",(()=>{this.onCloseHandler(),this.content.style="display: none;",this.hidden=!0}),{once:!0})}}class i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.textPrompt=[],this.currentIndex=0,this.hidden=!1,this.onClearHandler=()=>{},this.shadowRoot.innerHTML='\n            <style>\n                * {\n                    box-sizing: border-box;\n                }\n\n                .prompt-text {\n                    font-size: 1.6em;\n                    font-weight: 400;\n                    text-align: center;\n                    opacity: 0;\n                }\n\n                .fadeIn {\n                    animation-duration: 3s;\n                    animation-timing-function: ease-in-out;\n                    line-height: 1.2em;\n                }\n\n                .fadeOut {\n                    animation: fadeOut 1s forwards;\n                    animation-duration: 0.75s;\n                }\n\n                @keyframes fadeIn {\n                    0% {\n                        opacity: 0;\n                    }\n                    20%, 80% {\n                        opacity: 1;\n                    }\n                    100% {\n                        opacity: 0;\n                    }\n                }\n\n                @keyframes fadeOut {\n                    from {\n                        opacity: 1;\n                    }\n                    to {\n                        opacity: 0;\n                    }\n                }\n            </style>\n            <p class="prompt-text"></p> \x3c!-- Ãšnico elemento de texto --\x3e\n        ',this.textElement=this.shadowRoot.querySelector(".prompt-text")}static get observedAttributes(){return["hidden"]}connectedCallback(){const t=this.getAttribute("textPrompt");t&&(this.textPrompt=JSON.parse(t)),this.textPrompt.length>0&&this.startAnimation()}startAnimation(){const t=()=>{this.textElement.textContent=this.textPrompt[this.currentIndex],this.textElement.classList.add("fadeIn"),this.textElement.style.animationName="none",this.textElement.offsetWidth,this.textElement.style.animationName="fadeIn",this.currentIndex===this.textPrompt.length-1?(this.textElement.style.animationName="none",this.textElement.style.opacity="1"):(this.currentIndex=(this.currentIndex+1)%this.textPrompt.length,setTimeout(t,3e3))};t()}set onClear(t){this.onClearHandler=t}clear=()=>{this.textElement.style.animationName="fadeOut",this.textElement.offsetWidth,this.textElement.classList.add("fadeOut"),this.textElement.addEventListener("animationend",(()=>{this.textElement.remove(),this.hidden=!0,this.onClearHandler()}),{once:!0})}}var s=t.p+"assets/wifi.svg",o=t.p+"assets/lockerClosed.svg",r=t.p+"assets/lockerOpened.svg";class d extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.wifiSelectedHandler=()=>{},this.encryption=null,this.ssid=null,this.signal=null,this.shadowRoot.innerHTML=`\n\n            <style>\n                * {\n                    box-sizing: border-box;\n                }\n\n                .wifi-network {\n                    display: flex;\n                    width: 100%;\n                    justify-content: space-between; \n                    padding: 8px 12px;\n                    font-size: 0.8em;\n                    background-color: white;\n                    cursor: pointer;\n                }\n\n                .wifi-network:hover {\n                    background-color: #e9e9e9;\n                }\n\n                .left {\n                    display: flex;\n                    margin: 0px;\n                    align-items: center;\n                    gap: 8px;\n                }\n\n                .right {\n                    text-align: center;\n                    margin-top: auto;\n                    margin-bottom: auto;\n                }\n            </style>\n\n            <div class="wifi-network">\n                <div class="left">\n                    <img src=${s} alt="wifi-icon"/>                 \n                    <p>${this.ssid}</p>\n                </div>\n                <div class="right">\n                    ${this.encryption?`<img src=${o}  alt="locked/>`:`<img src=${r} alt="unlocked"/>`}\n                </div>\n            </div>\n        `,this.wifiSsidElement=this.shadowRoot.querySelector(".left p"),this.wifiEncryptionElement=this.shadowRoot.querySelector(".right"),this.wifiNetworkElement=this.shadowRoot.querySelector(".wifi-network"),this.wifiNetworkElement.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("wifiSelected",{detail:{ssid:this.ssid,encryption:this.encryption,signal:this.signal},bubbles:!0,composed:!0}))}))}static get observedAttributes(){return["ssid","encryption","signal"]}attributeChangedCallback(t,e,n){"ssid"===t&&(this.ssid=n,this.wifiSsidElement.textContent=n),"encryption"===t&&(this.encryption=n,this.wifiEncryptionElement.innerHTML="true"===n.toLowerCase()?`<img src=${o} alt="locked"/>`:`<img src=${r} alt="unlocked"/>`),"signal"===t&&(this.signal=n)}}void 0===customElements.get("m-wifi-element")&&customElements.define("m-wifi-element",d);class a extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.wifiSelectHandler=()=>{},this.shadowRoot.innerHTML='\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n\n            .wifi-list {\n                display: flex;\n                flex-direction: column;\n                justify-items: start;\n                width: 100%;\n                flex-wrap: wrap;\n                overflow: scroll;\n            }\n\n        </style>\n        \n        <div class="wifi-list">\n        </div>\n      ',this.content=this.shadowRoot.querySelector(".wifi-list"),this.wifiNetworkElement=this.shadowRoot.querySelector(".wifi-network")}async connectedCallback(){(async()=>(await fetch("wifi-list",{method:"GET"})).json())().then((t=>{t.forEach((t=>{const e=document.createElement("m-wifi-element");e.setAttribute("ssid",t.ssid),e.setAttribute("encryption",t.encryption),e.setAttribute("signal",t.signal),this.content.appendChild(e),e.addEventListener("wifiSelected",(t=>{this.wifiSelectHandler(t.detail)}))}))}))}set onSelectWifi(t){this.wifiSelectHandler=t}}class l extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n        <style>\n            * {\n                box-sizing: border-box;\n            }\n\n            input {\n                background-color: white;\n                font-weight: 400;\n                border: 1px solid #e9e9e9;\n                padding: 1em 1em 1em 1em;\n                border-radius: 24px;\n                width: 100%;\n            }\n\n            input:focus, input:active, input:focus-visibile{\n                border: none;  \n                outline: none;\n            }\n\n            .input-wrapper {\n                display: block;\n                cursor: pointer;\n                width: 240px;\n            }\n\n            .right {\n                position: relative;\n                top: -30px;\n                float: right;\n                right: 12px;\n                height: 24px;\n                width: 24px;\n                z-index: 2;\n            }\n\n            .left {\n                position: relative;\n                left: 12px;\n                bottom: -38px;\n                height: 24px;\n                width: 24px;\n                z-index: 2;\n            }\n\n        </style>\n        <div id="content">\n            <div class="input-wrapper">\n                <div  class="left">\n                    <slot name="left"></slot>\n                </div>\n                <input type="password" placeholder="Password"/>\n                <div class="right">\n                    <slot name="right"></slot>\n                </div>\n            </div>\n        </div>\n      ',this.input=this.shadowRoot.querySelector("input"),this.leftSlot=this.shadowRoot.querySelector('slot[name="left"]'),this.rightSlot=this.shadowRoot.querySelector('slot[name="right"]')}static get observedAttributes(){return["type","placeholder","value"]}leftSlotChange(){if(void 0!==this.leftSlot){const t=this.leftSlot?.assignedNodes().length>0;this.input.style.paddingLeft=t?"40px":"1em"}}rightSlotChange(){if(void 0!==this.rightSlot){const t=this.rightSlot?.assignedNodes().length>0;this.input.style.paddingRight=t?"40px":"1em"}}connectedCallback(){this.leftSlot.addEventListener("slotchange",this.leftSlotChange.bind(this)),this.rightSlot.addEventListener("slotchange",this.rightSlotChange.bind(this)),this.input.addEventListener("input",(t=>{this.value=this.input.value,document.dispatchEvent(new Event(t.type,t))}))}attributeChangedCallback(t,e,n){"type"===t&&this.input&&(this.input.type=n||""),"placholder"===t&&this.input&&(this.input.placeholder=n||""),"value"===t&&this.input&&(this.input.value=n||"")}get type(){return this.getAttribute("type")}set type(t){this.setAttribute("type",t)}get placeholder(){return this.getAttribute("placeholder")}set placeholder(t){this.setAttribute("placeholder",t)}set onClick(t){this.input.onclick=t}}var c=t.p+"assets/eyeOpen.svg",h=t.p+"assets/eyeClosed.svg";class p extends HTMLElement{constructor(){super(),this.type="password",this.placeholder="Password",this.value="",this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n            <m-input type="password" placeholder="Password"></m-input>\n        '}connectedCallback(){let t=document.createElement("img");t.src=h,t.setAttribute("slot","right"),t.id="eye-icon",t.addEventListener("click",(()=>{this.togglePassword()}));let e=this.shadowRoot.querySelector("m-input");e.appendChild(t),e.addEventListener("input",(t=>{this.value=e.value,document.dispatchEvent(new Event(t.type,t))}))}attributeChangedCallback(t,e,n){"placholder"===t&&this.input&&(this.shadowRoot.querySelector("m-input").placeholder=n||"")}static get observedAttributes(){return["placeholder"]}togglePassword(){"password"===this.type?(this.type="text",this.shadowRoot.getElementById("eye-icon").src=c):(this.type="password",this.shadowRoot.getElementById("eye-icon").src=h),this.shadowRoot.querySelector("m-input").setAttribute("type",this.type)}}void 0===customElements.get("m-button")&&customElements.define("m-button",e),void 0===customElements.get("m-card")&&customElements.define("m-card",n),void 0===customElements.get("m-prompt")&&customElements.define("m-prompt",i),void 0===customElements.get("m-wifi-list")&&customElements.define("m-wifi-list",a),void 0===customElements.get("m-input")&&customElements.define("m-input",l),void 0===customElements.get("m-input-password")&&customElements.define("m-input-password",p);const u=document.getElementById("next-button"),m=document.getElementById("connect-button"),w=document.getElementById("retry-button"),g=document.getElementById("prompt"),f=document.getElementById("wifi-card"),y=document.getElementById("wifi-list"),x=document.getElementById("wifi-password-card"),b=document.getElementById("wifi-password"),v=document.getElementById("loading"),E=document.getElementById("connection-result");let S="Init",k={ssid:"",encryption:!1},C=async(t,e)=>{return(await fetch("wifi-connect",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:JSON.stringify({ssid:t,password:e})})).json()};f.onClose=()=>{if(k.encryption){S="Set-Password",x.show();let t=document.createElement("p");t.innerText=`${k.ssid}'s Network`,document.querySelector('#wifi-password-card [slot="body"] .ssid').appendChild(t),m.hidden=!1}else S="Connecting-Network",C(k.ssid,null)},x.onClose=async()=>{S="Connecting-Network",v.hidden=!1;let t=await C(k.ssid,b.value),e=document.createElement("p"),n=document.createElement("div");n.setAttribute("slot","body"),n.setAttribute("class","card-wrapper"),n.setAttribute("style","padding: 12px;"),n.innerHTML=`\n    <img src=${s} style="width: 48px; height:48px"/>\n    <p>Your device is now connected to the network.<p>\n    <p>You can now close this window.<p>\n  `,e.innerText="Connected",e.setAttribute("slot","title"),S="Connected","success"!=t.status&&(e.innerText="Failed",n.innerHTML="\n    <p>Your device was not able to connect to the network.<p>\n    <p>Check the password and try again.<p>\n  ",w.hidden=!1),E.appendChild(n,E.querySelector('[slot="body"]')),E.appendChild(e),E.show(),v.hidden=!0},E.onClose=()=>{S="List-Wifi",f.show(),w.hidden=!0},y.onSelectWifi=t=>{k.ssid=t.ssid,k.encryption="true"===t.encryption,f.close()},g.onClear=()=>{f.show(),S="List-Wifi",u.hidden=!0},u.onclick=()=>{"Init"===S?g.clear():"List-Wifi"===S&&f.close()},m.onclick=async()=>{x.close(),m.hidden=!0},w.onclick=async()=>{S="List-Wifi",E.close()}}();