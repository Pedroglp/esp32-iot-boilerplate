"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryParseDate = tryParseDate;
exports.tryParseJSONDate = tryParseJSONDate;
exports.parsePrimitives = parsePrimitives;
exports.requireDefault = requireDefault;
const log_1 = __importDefault(require("./log"));
function tryParseDate(value) {
    if (typeof value !== "string" || value.length < 19 || value.length > 27)
        return value;
    if (/^(\d{4})-(\d{2})-(\d{2})T(\d{2})\:(\d{2}):(\d{2})/.test(value)) {
        const v = Date.parse(value);
        if (!Number.isNaN(v))
            return new Date(v);
    }
    return value;
}
function tryParseJSONDate(obj) {
    try {
        function map(v) {
            if (!v)
                return v;
            const t = typeof v;
            if (t === "string") {
                return tryParseDate(v);
            }
            if (t !== "object" || v instanceof Date)
                return v;
            if (Array.isArray(v)) {
                for (let i = 0; i < v.length; ++i) {
                    v[i] = map(v[i]);
                }
            }
            else {
                const keys = Object.keys(v);
                for (let i = 0; i < keys.length; ++i) {
                    const key = keys[i];
                    v[key] = map(v[key]);
                }
            }
            return v;
        }
        return map(obj);
    }
    catch (err) {
        log_1.default.error("Failed parsing json-date", err);
        return obj;
    }
}
function parsePrimitives(v) {
    try {
        if (v == null) {
            return null;
        }
        if (Array.isArray(v)) {
            v.forEach((_, i) => {
                v[i] = parsePrimitives(v[i]);
            });
            return v;
        }
        if (typeof v === "object") {
            Object.keys(v).forEach((k) => {
                v[k] = parsePrimitives(v[k]);
            });
            return v;
        }
        if (v === "true")
            return true;
        if (v === "false")
            return false;
        if (v === "null")
            return null;
        const num = Number(v);
        if (!Number.isNaN(num))
            return num;
        return tryParseJSONDate(v);
    }
    catch (err) {
        log_1.default.error("Failed parsing form-data primitives", err);
        return v;
    }
}
function requireDefault(file) {
    const m = require(file.path);
    const arr = [];
    function moduleEachWrapper(usedApp) {
        arr.forEach((f) => f(usedApp));
    }
    Object.keys(m).forEach((key) => {
        const f = m[key];
        if (typeof f !== "function") {
            log_1.default.error(`Wrong 'export ${key} = ${f}' from ${file.rootName}: expected exporting only functions`);
        }
        else {
            arr.push(f);
        }
    });
    return moduleEachWrapper;
}
