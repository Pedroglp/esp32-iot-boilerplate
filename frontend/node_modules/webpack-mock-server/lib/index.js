"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const compiler_1 = __importDefault(require("./compiler"));
const log_1 = __importDefault(require("./log"));
const mockServer_1 = __importDefault(require("./mockServer"));
const mockServerHelper_1 = __importDefault(require("./mockServerHelper"));
const mockServerMiddleware_1 = __importDefault(require("./mockServerMiddleware"));
const mockServerOptions_1 = require("./mockServerOptions");
const webpackMockServer = {
    use(app, extendOptions = undefined) {
        const opt = Object.assign(Object.assign({}, mockServerOptions_1.defOptions), extendOptions);
        opt.compilerOptions = Object.assign(Object.assign(Object.assign({}, mockServerOptions_1.defOptions.compilerOptions), extendOptions === null || extendOptions === void 0 ? void 0 : extendOptions.compilerOptions), mockServerOptions_1.defOptions.strictCompilerOptions);
        log_1.default.verbose = opt.verbose;
        (0, mockServerMiddleware_1.default)(app, opt.port);
        try {
            log_1.default.debug("Starting mock-server...");
            (0, compiler_1.default)(opt.entry, opt.tsConfigFileName, opt.compilerOptions, (outFileNames) => {
                (0, mockServer_1.default)(outFileNames, opt, (port) => {
                    (0, mockServerMiddleware_1.default)(app, port);
                });
            });
        }
        catch (ex) {
            log_1.default.error("Unable to start server\n", ex);
        }
    },
    add(mockFunction) {
        return (app) => {
            mockFunction(app, mockServerHelper_1.default);
        };
    },
    get defaultOptions() {
        return JSON.parse(JSON.stringify(mockServerOptions_1.defOptions));
    },
};
module.exports = webpackMockServer;
